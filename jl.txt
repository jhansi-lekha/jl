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



package graph;
import java.util.*;
import java.lang.*;
import java.io.*;
import javafx.scene.input.KeyCode;
import static javafx.scene.input.KeyCode.T;

/**
 *
 * @author 19BCE7593
 */
public class Graph {

    class Edge implements Comparable<Edge>
    {
        int start, end, weight;
        public int compareTo(Edge compareEdge)
        {
            return this.weight-compareEdge.weight;
        }
    };
    class subset
    {
        int parent, rank;
    };
    int V, E;    
    Edge edge[]; 
    Graph(int v, int e)
    {
        V = v;
        E = e;
        edge = new Edge[E];
        for (int i=0; i<e; ++i)
            edge[i] = new Edge();
    }
    int find(subset subsets[], int i)
    {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }
    void Union(subset subsets[], int a, int b)
    {
        int aroot = find(subsets, a);
        int broot = find(subsets, b);
       
        if (subsets[aroot].rank < subsets[broot].rank)
            subsets[aroot].parent = broot;
        else if (subsets[aroot].rank > subsets[broot].rank)
            subsets[broot].parent = aroot;
        else
        {
            subsets[broot].parent = aroot;
            subsets[aroot].rank++;
        }
    }
    void KruskalMST()
    {
        Edge result[]=new Edge[V]; KeyCode T1 = T;
        int e = 0;  
        int i = 0;  
        for (i=0; i<V; ++i)
            result[i] = new Edge();
        Arrays.sort(edge);
        subset subsets[] = new subset[V];
        for(i=0; i<V; ++i)
            subsets[i]=new subset();
        for (int v = 0; v < V; ++v)
        {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }
        i = 0; 
        while (e < V - 1)
        {
            Edge next_edge = new Edge();
            next_edge = edge[i++];
            int a = find(subsets, next_edge.start);
            int b = find(subsets, next_edge.end);
            if (a != b)
            {
                result[e++] = next_edge;
                Union(subsets, a, b);
            }
        }
        System.out.println("Following are the edges in " + "the constructed MST");
        for (i = 0; i < e; ++i)
            System.out.println(result[i].start+" -- " + 
                   result[i].end+" == " + result[i].weight);
    }

    
    public static void main(String[] args) {
        // TODO code application logic here
        int V = 5; 
        int E = 7;  
        Graph graph = new Graph(V, E);
        graph.edge[0].start = 0;
        graph.edge[0].end = 1;
        graph.edge[0].weight = 1;
        
        graph.edge[1].start = 1;
        graph.edge[1].end = 2;
        graph.edge[1].weight = 3;
        
        graph.edge[2].start = 0;
        graph.edge[2].end = 2;
        graph.edge[2].weight = 7;
   
        graph.edge[3].start = 0;
        graph.edge[3].end = 3;
        graph.edge[3].weight = 10;
       
        graph.edge[4].start = 2;
        graph.edge[4].end = 3;
        graph.edge[4].weight = 4;
        
        graph.edge[5].start = 0;
        graph.edge[5].end = 4;
        graph.edge[5].weight = 5;
        
        graph.edge[6].start = 3;
        graph.edge[6].end = 4;
        graph.edge[6].weight = 2;
        graph.KruskalMST();
        
    }
    
}
